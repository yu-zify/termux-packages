From 48054cea43e3172cbb7166eff3a9ab14ede8dd05 Mon Sep 17 00:00:00 2001
From: xMeM <haooy@outlook.com>
Date: Thu, 14 Nov 2024 15:27:49 +0800
Subject: [PATCH 2/2] vulkan/x11: termux-x11 support

Signed-off-by: xMeM <haooy@outlook.com>
---
 src/vulkan/wsi/wsi_common.c         | 314 +++++++++++++++++++++++++++-
 src/vulkan/wsi/wsi_common.h         |   7 +
 src/vulkan/wsi/wsi_common_private.h |   8 +
 src/vulkan/wsi/wsi_common_x11.c     |  99 +++++----
 4 files changed, 390 insertions(+), 38 deletions(-)

diff --git a/src/vulkan/wsi/wsi_common.c b/src/vulkan/wsi/wsi_common.c
index a11b6bd64bc..77755e96b93 100644
--- a/src/vulkan/wsi/wsi_common.c
+++ b/src/vulkan/wsi/wsi_common.c
@@ -47,6 +47,10 @@
 #include <unistd.h>
 #endif
 
+#ifdef __TERMUX__
+#include <android/hardware_buffer.h>
+#endif
+
 uint64_t WSI_DEBUG;
 
 static const struct debug_control debug_control[] = {
@@ -55,6 +59,7 @@ static const struct debug_control debug_control[] = {
    { "noshm",        WSI_DEBUG_NOSHM },
    { "linear",       WSI_DEBUG_LINEAR },
    { "dxgi",         WSI_DEBUG_DXGI },
+   { "blit",         WSI_DEBUG_BLIT },
    { NULL, },
 };
 
@@ -86,6 +91,7 @@ wsi_device_init(struct wsi_device *wsi,
    wsi->sw = device_options->sw_device || (WSI_DEBUG & WSI_DEBUG_SW);
    wsi->wants_linear = (WSI_DEBUG & WSI_DEBUG_LINEAR) != 0;
    wsi->x11.extra_xwayland_image = device_options->extra_xwayland_image;
+   wsi->needs_blit = (WSI_DEBUG & WSI_DEBUG_BLIT) != 0;
 #define WSI_GET_CB(func) \
    PFN_vk##func func = (PFN_vk##func)proc_addr(pdevice, "vk" #func)
    WSI_GET_CB(GetPhysicalDeviceExternalSemaphoreProperties);
@@ -99,12 +105,19 @@ wsi_device_init(struct wsi_device *wsi,
    wsi->pci_bus_info.sType =
       VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT;
    wsi->pci_bus_info.pNext = &wsi->drm_info;
+   VkPhysicalDeviceDriverProperties pddp = {
+      .sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES,
+      .pNext = &wsi->pci_bus_info,
+   };
    VkPhysicalDeviceProperties2 pdp2 = {
       .sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2,
-      .pNext = &wsi->pci_bus_info,
+      .pNext = &pddp,
    };
    GetPhysicalDeviceProperties2(pdevice, &pdp2);
 
+   if (pddp.driverID == VK_DRIVER_ID_ARM_PROPRIETARY)
+      wsi->needs_blit = true;
+
    wsi->maxImageDimension2D = pdp2.properties.limits.maxImageDimension2D;
    assert(pdp2.properties.limits.optimalBufferCopyRowPitchAlignment <= UINT32_MAX);
    wsi->optimalBufferCopyRowPitchAlignment =
@@ -210,6 +223,10 @@ wsi_device_init(struct wsi_device *wsi,
    WSI_GET_CB(UnmapMemory);
    if (wsi->khr_present_wait)
       WSI_GET_CB(WaitSemaphores);
+#ifdef __TERMUX__
+   WSI_GET_CB(GetMemoryAndroidHardwareBufferANDROID);
+   WSI_GET_CB(GetAndroidHardwareBufferPropertiesANDROID);
+#endif
 #undef WSI_GET_CB
 
 #ifdef VK_USE_PLATFORM_XCB_KHR
@@ -366,6 +383,12 @@ get_blit_type(const struct wsi_device *wsi,
       return wsi_cpu_image_needs_buffer_blit(wsi, cpu_params) ?
          WSI_SWAPCHAIN_BUFFER_BLIT : WSI_SWAPCHAIN_NO_BLIT;
    }
+#ifdef __TERMUX__
+   case WSI_IMAGE_TYPE_AHB: {
+      return wsi->needs_blit ? WSI_SWAPCHAIN_IMAGE_BLIT :
+         WSI_SWAPCHAIN_NO_BLIT;
+   }
+#endif
 #ifdef HAVE_LIBDRM
    case WSI_IMAGE_TYPE_DRM: {
       const struct wsi_drm_image_params *drm_params =
@@ -386,6 +409,14 @@ get_blit_type(const struct wsi_device *wsi,
    }
 }
 
+#ifdef __TERMUX__
+static VkResult
+wsi_configure_ahb_image(const struct wsi_swapchain *chain,
+                        const VkSwapchainCreateInfoKHR *pCreateInfo,
+                        const struct wsi_base_image_params *params,
+                        struct wsi_image_info *info);
+#endif
+
 static VkResult
 configure_image(const struct wsi_swapchain *chain,
                 const VkSwapchainCreateInfoKHR *pCreateInfo,
@@ -399,6 +430,11 @@ configure_image(const struct wsi_swapchain *chain,
          container_of(params, const struct wsi_cpu_image_params, base);
       return wsi_configure_cpu_image(chain, pCreateInfo, cpu_params, info);
    }
+#ifdef __TERMUX__
+   case WSI_IMAGE_TYPE_AHB: {
+      return wsi_configure_ahb_image(chain, pCreateInfo, params, info);
+   }
+#endif
 #ifdef HAVE_LIBDRM
    case WSI_IMAGE_TYPE_DRM: {
       const struct wsi_drm_image_params *drm_params =
@@ -698,6 +734,12 @@ wsi_destroy_image_info(const struct wsi_swapchain *chain,
       vk_free(&chain->alloc, info->modifier_props);
       info->modifier_props = NULL;
    }
+#ifdef __TERMUX__
+   if (info->ahb_desc != NULL) {
+      vk_free(&chain->alloc, info->ahb_desc);
+      info->ahb_desc = NULL;
+   }
+#endif
 }
 
 VkResult
@@ -760,6 +802,11 @@ wsi_destroy_image(const struct wsi_swapchain *chain,
 {
    const struct wsi_device *wsi = chain->wsi;
 
+#ifdef __TERMUX__
+   if (image->ahb)
+      AHardwareBuffer_release(image->ahb);
+#endif
+
 #ifndef _WIN32
    if (image->dma_buf_fd >= 0)
       close(image->dma_buf_fd);
@@ -2161,6 +2208,162 @@ wsi_create_cpu_linear_image_mem(const struct wsi_swapchain *chain,
    return VK_SUCCESS;
 }
 
+#ifdef __TERMUX__
+static VkResult
+wsi_create_ahb_image_mem(const struct wsi_swapchain *chain,
+                         const struct wsi_image_info *info,
+                         struct wsi_image *image)
+{
+   const struct wsi_device *wsi = chain->wsi;
+   VkAndroidHardwareBufferPropertiesANDROID ahb_props;
+   VkResult result;
+
+   if (AHardwareBuffer_allocate(info->ahb_desc, &image->ahb))
+      return VK_ERROR_OUT_OF_HOST_MEMORY;
+
+   ahb_props = (VkAndroidHardwareBufferPropertiesANDROID) {
+      .sType = VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID,
+   };
+
+   result = wsi->GetAndroidHardwareBufferPropertiesANDROID(
+      chain->device, image->ahb, &ahb_props);
+   if (result != VK_SUCCESS)
+      return result;
+
+   const VkMemoryDedicatedAllocateInfo memory_dedicated_info = {
+      .sType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
+      .image = image->image,
+      .buffer = VK_NULL_HANDLE,
+   };
+   VkImportAndroidHardwareBufferInfoANDROID impory_memory_info = {
+      .sType = VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID,
+      .pNext = &memory_dedicated_info,
+      .buffer = image->ahb,
+   };
+   VkMemoryAllocateInfo memory_info = {
+      .sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO,
+      .pNext = &impory_memory_info,
+      .allocationSize = ahb_props.allocationSize,
+      .memoryTypeIndex =
+         wsi_select_device_memory_type(wsi, ahb_props.memoryTypeBits),
+   };
+
+   result = wsi->AllocateMemory(chain->device, &memory_info,
+                                &chain->alloc, &image->memory);
+   if (result != VK_SUCCESS)
+      return result;
+
+   image->num_planes = 1;
+   image->drm_modifier = 0;
+
+   return VK_SUCCESS;
+}
+
+static VkResult
+wsi_create_ahb_blit_context(const struct wsi_swapchain *chain,
+                            const struct wsi_image_info *info,
+                            struct wsi_image *image)
+{
+   assert(chain->blit.type == WSI_SWAPCHAIN_IMAGE_BLIT);
+
+   const VkExternalMemoryHandleTypeFlags handle_types =
+      VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID;
+
+   const struct wsi_device *wsi = chain->wsi;
+   VkResult result;
+
+   const VkExternalMemoryImageCreateInfo image_external_info = {
+      .sType = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO,
+      .handleTypes = handle_types,
+   };
+   const VkImageCreateInfo image_info = {
+      .sType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO,
+      .pNext = &image_external_info,
+      .flags = 0u,
+      .extent = info->create.extent,
+      .format = VK_FORMAT_R8G8B8A8_UNORM,
+      .imageType = VK_IMAGE_TYPE_2D,
+      .mipLevels = 1,
+      .arrayLayers = 1,
+      .samples = VK_SAMPLE_COUNT_1_BIT,
+      .tiling = VK_IMAGE_TILING_OPTIMAL,
+      .usage = VK_IMAGE_USAGE_TRANSFER_DST_BIT,
+      .sharingMode = VK_SHARING_MODE_EXCLUSIVE,
+      .queueFamilyIndexCount = info->create.queueFamilyIndexCount,
+      .pQueueFamilyIndices = info->create.pQueueFamilyIndices,
+      .initialLayout = VK_IMAGE_LAYOUT_UNDEFINED,
+   };
+   result = wsi->CreateImage(chain->device, &image_info,
+                             &chain->alloc, &image->blit.image);
+   if (result != VK_SUCCESS)
+      return result;
+
+   VkMemoryDedicatedAllocateInfo img_mem_dedicated_info = {
+      .sType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
+      .pNext = NULL,
+      .image = image->blit.image,
+      .buffer = VK_NULL_HANDLE,
+   };
+   VkExportMemoryAllocateInfo export_info = {
+      .sType = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,
+      .pNext = &img_mem_dedicated_info,
+      .handleTypes = handle_types,
+   };
+   VkMemoryAllocateInfo buf_mem_info = {
+      .sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO,
+      .pNext = &export_info,
+      .allocationSize = 0,
+      .memoryTypeIndex = 0,
+   };
+
+   result = wsi->AllocateMemory(chain->device, &buf_mem_info,
+                                &chain->alloc, &image->blit.memory);
+   if (result != VK_SUCCESS)
+      return result;
+
+   result = wsi->BindImageMemory(chain->device, image->blit.image,
+                                 image->blit.memory, 0);
+   if (result != VK_SUCCESS)
+      return result;
+
+   VkMemoryGetAndroidHardwareBufferInfoANDROID get_ahb_info = {
+      .sType = VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID,
+      .pNext = NULL,
+      .memory = image->blit.memory,
+   };
+
+   result = wsi->GetMemoryAndroidHardwareBufferANDROID(
+      chain->device, &get_ahb_info, &image->ahb);
+   if (result != VK_SUCCESS)
+      return result;
+
+   VkMemoryRequirements reqs;
+   wsi->GetImageMemoryRequirements(chain->device, image->image, &reqs);
+
+   const VkMemoryDedicatedAllocateInfo memory_dedicated_info = {
+      .sType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
+      .image = image->image,
+   };
+   const VkMemoryAllocateInfo memory_info = {
+      .sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO,
+      .pNext = &memory_dedicated_info,
+      .allocationSize = reqs.size,
+      .memoryTypeIndex =
+         wsi_select_device_memory_type(wsi, reqs.memoryTypeBits),
+   };
+
+   result = wsi->AllocateMemory(chain->device, &memory_info,
+                                &chain->alloc, &image->memory);
+   if (result != VK_SUCCESS)
+      return result;
+
+   image->num_planes = 1;
+
+   return VK_SUCCESS;
+}
+
+#endif
+
 static VkResult
 wsi_create_cpu_buffer_image_mem(const struct wsi_swapchain *chain,
                                 const struct wsi_image_info *info,
@@ -2233,6 +2436,115 @@ wsi_configure_cpu_image(const struct wsi_swapchain *chain,
    return VK_SUCCESS;
 }
 
+#ifdef __TERMUX__
+inline static uint32_t
+vk_format_to_ahb_format(VkFormat format) {
+   switch (format) {
+   case VK_FORMAT_B8G8R8A8_SRGB:
+   case VK_FORMAT_B8G8R8A8_UNORM:
+      return AHARDWAREBUFFER_FORMAT_R8G8B8A8_UNORM;
+   case VK_FORMAT_R5G6B5_UNORM_PACK16:
+      return AHARDWAREBUFFER_FORMAT_R5G6B5_UNORM;
+   case VK_FORMAT_A2R10G10B10_UNORM_PACK32:
+      return AHARDWAREBUFFER_FORMAT_R10G10B10A2_UNORM;
+   default:
+      unreachable("unsupported format");
+   }
+}
+#endif
+
+#ifdef __TERMUX__
+static VkResult
+wsi_configure_ahb_image(const struct wsi_swapchain *chain,
+                        const VkSwapchainCreateInfoKHR *pCreateInfo,
+                        const struct wsi_base_image_params *params,
+                        struct wsi_image_info *info)
+{
+   assert(params->image_type == WSI_IMAGE_TYPE_AHB);
+   assert(chain->blit.type == WSI_SWAPCHAIN_NO_BLIT ||
+          chain->blit.type == WSI_SWAPCHAIN_IMAGE_BLIT);
+
+   VkResult result;
+
+   if (chain->blit.type == WSI_SWAPCHAIN_IMAGE_BLIT) {
+      result = wsi_configure_image(chain, pCreateInfo, 0, info);
+      if (result != VK_SUCCESS)
+         return result;
+
+      wsi_configure_image_blit_image(chain, info);
+      info->create_mem = wsi_create_ahb_blit_context;
+      return VK_SUCCESS;
+   }
+
+   VkExternalMemoryHandleTypeFlags handle_types =
+      VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID;
+
+   VkPhysicalDeviceImageFormatInfo2 format_info = {
+      .sType =
+         VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
+      .format = pCreateInfo->imageFormat,
+      .type = VK_IMAGE_TYPE_2D,
+      .tiling = VK_IMAGE_TILING_OPTIMAL,
+      .usage = pCreateInfo->imageUsage,
+      .flags = info->create.flags,
+   };
+   VkPhysicalDeviceExternalImageFormatInfo external_format_info =
+   {
+      .sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,
+      .pNext = NULL,
+      .handleType = handle_types,
+   };
+   __vk_append_struct(&format_info, &external_format_info);
+
+   VkImageFormatProperties2 format_props = {
+      .sType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2,
+   };
+   VkExternalImageFormatProperties external_format_props = {
+      .sType = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES,
+      .pNext = NULL,
+   };
+   __vk_append_struct(&format_props, &external_format_props);
+
+   result = chain->wsi->GetPhysicalDeviceImageFormatProperties2(
+      chain->wsi->pdevice, &format_info, &format_props);
+   if (result != VK_SUCCESS)
+      return result;
+
+   assert(pCreateInfo->imageExtent.width <= format_props.imageFormatProperties.maxExtent.width &&
+          pCreateInfo->imageExtent.height <= format_props.imageFormatProperties.maxExtent.height);
+   assert(external_format_props.externalMemoryProperties.externalMemoryFeatures &
+          VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT);
+
+   result = wsi_configure_image(chain, pCreateInfo, handle_types,
+                                info);
+   if (result != VK_SUCCESS)
+      return result;
+
+   info->ahb_desc = vk_alloc(&chain->alloc,
+                             sizeof(AHardwareBuffer_Desc),
+                             8,
+                             VK_SYSTEM_ALLOCATION_SCOPE_OBJECT);
+   if (!info->ahb_desc) {
+      wsi_destroy_image_info(chain, info);
+      return VK_ERROR_OUT_OF_HOST_MEMORY;
+   }
+
+   *info->ahb_desc = (AHardwareBuffer_Desc) {
+      .width = info->create.extent.width,
+      .height = info->create.extent.height,
+      .format = vk_format_to_ahb_format(info->create.format),
+      .layers = info->create.arrayLayers,
+      .usage = AHARDWAREBUFFER_USAGE_GPU_COLOR_OUTPUT |
+               AHARDWAREBUFFER_USAGE_GPU_SAMPLED_IMAGE |
+               AHARDWAREBUFFER_USAGE_CPU_READ_OFTEN,
+   };
+   info->create.format = VK_FORMAT_UNDEFINED;
+   info->create_mem = wsi_create_ahb_image_mem;
+
+   return VK_SUCCESS;
+}
+#endif
+
 VKAPI_ATTR VkResult VKAPI_CALL
 wsi_WaitForPresentKHR(VkDevice device, VkSwapchainKHR _swapchain,
                       uint64_t presentId, uint64_t timeout)
diff --git a/src/vulkan/wsi/wsi_common.h b/src/vulkan/wsi/wsi_common.h
index 2316d3156d0..ffa3a94e74c 100644
--- a/src/vulkan/wsi/wsi_common.h
+++ b/src/vulkan/wsi/wsi_common.h
@@ -179,6 +179,9 @@ struct wsi_device {
 
    bool sw;
 
+   bool wants_ahardware_buffer;
+   bool needs_blit;
+
    /* Set to true if the implementation is ok with linear WSI images. */
    bool wants_linear;
 
@@ -271,6 +274,10 @@ struct wsi_device {
    WSI_CB(MapMemory);
    WSI_CB(UnmapMemory);
    WSI_CB(WaitSemaphores);
+#ifdef __TERMUX__
+   WSI_CB(GetMemoryAndroidHardwareBufferANDROID);
+   WSI_CB(GetAndroidHardwareBufferPropertiesANDROID);
+#endif
 #undef WSI_CB
 
     struct wsi_interface *                  wsi[VK_ICD_WSI_PLATFORM_MAX];
diff --git a/src/vulkan/wsi/wsi_common_private.h b/src/vulkan/wsi/wsi_common_private.h
index b89e962c3ff..c205c4f62c3 100644
--- a/src/vulkan/wsi/wsi_common_private.h
+++ b/src/vulkan/wsi/wsi_common_private.h
@@ -40,6 +40,7 @@ struct wsi_swapchain;
 #define WSI_DEBUG_NOSHM       (1ull << 2)
 #define WSI_DEBUG_LINEAR      (1ull << 3)
 #define WSI_DEBUG_DXGI        (1ull << 4)
+#define WSI_DEBUG_BLIT        (1ull << 8)
 
 extern uint64_t WSI_DEBUG;
 
@@ -47,6 +48,7 @@ enum wsi_image_type {
    WSI_IMAGE_TYPE_CPU,
    WSI_IMAGE_TYPE_DRM,
    WSI_IMAGE_TYPE_DXGI,
+   WSI_IMAGE_TYPE_AHB,
 };
 
 struct wsi_base_image_params {
@@ -84,6 +86,9 @@ struct wsi_image_info {
    VkExternalMemoryImageCreateInfo ext_mem;
    VkImageFormatListCreateInfo format_list;
    VkImageDrmFormatModifierListCreateInfoEXT drm_mod_list;
+#ifdef __TERMUX__
+   struct AHardwareBuffer_Desc *ahb_desc;
+#endif
 
    enum wsi_image_type image_type;
    bool explicit_sync;
@@ -165,6 +170,9 @@ struct wsi_image {
    int dma_buf_fd;
 #endif
    void *cpu_map;
+#ifdef __TERMUX__
+   struct AHardwareBuffer *ahb;
+#endif
 };
 
 struct wsi_swapchain {
diff --git a/src/vulkan/wsi/wsi_common_x11.c b/src/vulkan/wsi/wsi_common_x11.c
index 0c0c489d893..5ed5d42341e 100644
--- a/src/vulkan/wsi/wsi_common_x11.c
+++ b/src/vulkan/wsi/wsi_common_x11.c
@@ -22,7 +22,6 @@
  */
 
 #include <X11/Xlib-xcb.h>
-#include <X11/xshmfence.h>
 #define XK_MISCELLANY
 #define XK_LATIN1
 #include <X11/keysymdef.h>
@@ -69,6 +68,11 @@
 #include <sys/shm.h>
 #endif
 
+#ifdef __TERMUX__
+#include <android/hardware_buffer.h>
+#include <sys/socket.h>
+#endif
+
 #ifndef XCB_PRESENT_OPTION_ASYNC_MAY_TEAR
 #define XCB_PRESENT_OPTION_ASYNC_MAY_TEAR 16
 #endif
@@ -1057,7 +1061,6 @@ struct x11_image {
    xcb_pixmap_t                              pixmap;
    xcb_xfixes_region_t                       update_region; /* long lived XID */
    xcb_xfixes_region_t                       update_area;   /* the above or None */
-   struct xshmfence *                        shm_fence;
    uint32_t                                  sync_fence;
    xcb_shm_seg_t                             shmseg;
    int                                       shmid;
@@ -1402,7 +1405,9 @@ x11_present_to_x11_dri3(struct x11_swapchain *chain, uint32_t image_index,
       options |= XCB_PRESENT_OPTION_SUBOPTIMAL;
 #endif
 
-   xshmfence_reset(image->shm_fence);
+   xcb_void_cookie_t scookie = xcb_sync_reset_fence(chain->conn,
+      image->sync_fence);
+   xcb_discard_reply(chain->conn, scookie.sequence);
 
    if (!chain->base.image_info.explicit_sync) {
       ++chain->sent_image_count;
@@ -1771,9 +1776,9 @@ x11_acquire_next_image(struct wsi_swapchain *anv_chain,
       return result;
 
    assert(*image_index < chain->base.image_count);
-   if (chain->images[*image_index].shm_fence &&
-       !chain->base.image_info.explicit_sync)
-      xshmfence_await(chain->images[*image_index].shm_fence);
+   xcb_void_cookie_t cookie = xcb_sync_await_fence(
+      chain->conn, 1, &chain->images[*image_index].sync_fence);
+   xcb_discard_reply(chain->conn, cookie.sequence);
 
    return result;
 }
@@ -2098,6 +2103,17 @@ x11_image_init(VkDevice device_h, struct x11_swapchain *chain,
       /* If the image has a modifier, we must have DRI3 v1.2. */
       assert(chain->has_dri3_modifiers);
 
+#ifdef __TERMUX__
+      int sock_fds[2] = { -1, -1 };
+      if (image->base.ahb) {
+         if (socketpair(AF_UNIX, SOCK_STREAM, 0, sock_fds) < 0) {
+            return VK_ERROR_OUT_OF_HOST_MEMORY;
+         }
+         AHardwareBuffer_sendHandleToUnixSocket(image->base.ahb, sock_fds[0]);
+         image->base.dma_buf_fd = sock_fds[1];
+         image->base.drm_modifier = 1255;
+      }
+#endif
       /* XCB requires an array of file descriptors but we only have one */
       int fds[4] = { -1, -1, -1, -1 };
       for (int i = 0; i < image->base.num_planes; i++) {
@@ -2128,6 +2144,16 @@ x11_image_init(VkDevice device_h, struct x11_swapchain *chain,
                                               chain->depth, bpp,
                                               image->base.drm_modifier,
                                               fds);
+#ifdef __TERMUX__
+      if (image->base.ahb) {
+         xcb_flush(chain->conn);
+         read(sock_fds[0], &image->base.dma_buf_fd, 1);
+         for (int i = 0; i < ARRAY_SIZE(sock_fds); i++) {
+            close(sock_fds[i]);
+         }
+         image->base.dma_buf_fd = -1;
+      }
+#endif
    } else
 #endif
    {
@@ -2140,14 +2166,23 @@ x11_image_init(VkDevice device_h, struct x11_swapchain *chain,
          return VK_ERROR_OUT_OF_HOST_MEMORY;
 
       cookie =
-         xcb_dri3_pixmap_from_buffer_checked(chain->conn,
-                                             image->pixmap,
-                                             chain->window,
-                                             image->base.sizes[0],
-                                             pCreateInfo->imageExtent.width,
-                                             pCreateInfo->imageExtent.height,
-                                             image->base.row_pitches[0],
-                                             chain->depth, bpp, fd);
+         xcb_dri3_pixmap_from_buffers_checked(chain->conn,
+                                              image->pixmap,
+                                              chain->window,
+                                              image->base.num_planes,
+                                              pCreateInfo->imageExtent.width,
+                                              pCreateInfo->imageExtent.height,
+                                              image->base.row_pitches[0],
+                                              image->base.offsets[0],
+                                              image->base.row_pitches[1],
+                                              image->base.offsets[1],
+                                              image->base.row_pitches[2],
+                                              image->base.offsets[2],
+                                              image->base.row_pitches[3],
+                                              image->base.offsets[3],
+                                              chain->depth, bpp,
+                                              1274,
+                                              &fd);
    }
 
    error = xcb_request_check(chain->conn, cookie);
@@ -2178,31 +2213,16 @@ x11_image_init(VkDevice device_h, struct x11_swapchain *chain,
 #endif
 
 out_fence:
-   fence_fd = xshmfence_alloc_shm();
-   if (fence_fd < 0)
-      goto fail_pixmap;
-
-   image->shm_fence = xshmfence_map_shm(fence_fd);
-   if (image->shm_fence == NULL)
-      goto fail_shmfence_alloc;
-
    image->sync_fence = xcb_generate_id(chain->conn);
-   xcb_dri3_fence_from_fd(chain->conn,
-                          image->pixmap,
-                          image->sync_fence,
-                          false,
-                          fence_fd);
-
-   xshmfence_trigger(image->shm_fence);
-
-   return VK_SUCCESS;
-
-fail_shmfence_alloc:
-   close(fence_fd);
+   cookie = xcb_sync_create_fence(chain->conn,
+                         image->pixmap,
+                         image->sync_fence,
+                         false);
+   xcb_discard_reply(chain->conn, cookie.sequence);
 
-fail_pixmap:
-   cookie = xcb_free_pixmap(chain->conn, image->pixmap);
+   cookie = xcb_sync_trigger_fence(chain->conn, image->sync_fence);
    xcb_discard_reply(chain->conn, cookie.sequence);
+   return VK_SUCCESS;
 
 fail_image:
    wsi_destroy_image(&chain->base, &image->base);
@@ -2220,7 +2240,6 @@ x11_image_finish(struct x11_swapchain *chain,
    if (!chain->base.wsi->sw || chain->has_mit_shm) {
       cookie = xcb_sync_destroy_fence(chain->conn, image->sync_fence);
       xcb_discard_reply(chain->conn, cookie.sequence);
-      xshmfence_unmap_shm(image->shm_fence);
 
       cookie = xcb_free_pixmap(chain->conn, image->pixmap);
       xcb_discard_reply(chain->conn, cookie.sequence);
@@ -2618,6 +2637,12 @@ x11_surface_create_swapchain(VkIcdSurfaceBase *icd_surface,
          .alloc_shm = wsi_conn->has_mit_shm ? &alloc_shm : NULL,
       };
       image_params = &cpu_image_params.base;
+#ifdef __TERMUX__
+   } else if (wsi_device->wants_ahardware_buffer) {
+      image_params = &(struct wsi_base_image_params){
+         .image_type = WSI_IMAGE_TYPE_AHB,
+      };
+#endif
    } else {
       drm_image_params = (struct wsi_drm_image_params) {
          .base.image_type = WSI_IMAGE_TYPE_DRM,
-- 
2.47.1

